#!/bin/bash
#
# Automated PR creation script for software status updates
# Based on apps-web/scripts/generate_app_files.sh pattern
#

set -e  # Exit on error

BRANCH_NAME="software-status-updates"
BASE_BRANCH="master"
PR_TYPE="Bot"
PR_TITLE="Automated Software Status Update"
PR_DESCRIPTION="Automated update of recommended TrueNAS versions from update server API. This PR updates data/software_status_config.yaml with the latest version recommendations."

# Predefined Reviewers (GitHub usernames/teams)
PREDEFINED_REVIEWERS=("truenas/docs-team")

echo "========================================="
echo "Software Status PR Creation Script"
echo "========================================="

# Convert reviewers array to comma-separated string
REVIEWERS_LIST=$(IFS=, ; echo "${PREDEFINED_REVIEWERS[*]}")

# Fetch latest from origin
echo "Fetching latest changes from origin..."
git fetch origin

# Checkout or create the branch
echo "Checking out branch: ${BRANCH_NAME}"
git checkout ${BRANCH_NAME} 2>/dev/null || git checkout -b ${BRANCH_NAME}

if [ $? -ne 0 ]; then
    echo "❌ Failed to checkout/create ${BRANCH_NAME} branch"
    exit 1
fi

# Always reset branch to match master (ensures no merge conflicts)
echo "Resetting ${BRANCH_NAME} to match ${BASE_BRANCH}..."
git reset --hard origin/${BASE_BRANCH}

if [ $? -ne 0 ]; then
    echo "❌ Failed to reset branch to origin/${BASE_BRANCH}"
    exit 1
fi

# Add the modified config file
echo "Adding modified software_status_config.yaml..."
git add data/software_status_config.yaml

if [ $? -ne 0 ]; then
    echo "❌ Failed to add data/software_status_config.yaml"
    exit 1
fi

# Create commit with descriptive message
COMMIT_MSG="Update software status recommendations

Automated update from TrueNAS update server API.
Updated file: data/software_status_config.yaml

Generated by: scripts/update-software-status.py
Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

echo "Creating commit..."
git commit -m "$COMMIT_MSG"

if [ $? -ne 0 ]; then
    echo "❌ Failed to create commit"
    exit 1
fi

# Push the branch (force push to overwrite any existing PR branch)
echo "Pushing branch to origin (force)..."
git push --force origin "$BRANCH_NAME"

if [ $? -ne 0 ]; then
    echo "❌ Failed to push branch to remote"
    exit 1
fi

# Format PR title
FINAL_PR_TITLE="$PR_TYPE: $PR_TITLE"

# Create or update the Pull Request using GitHub CLI
echo "Creating pull request..."
gh pr create --base "$BASE_BRANCH" --head "$BRANCH_NAME" --title "$FINAL_PR_TITLE" --body "$PR_DESCRIPTION" --reviewer "$REVIEWERS_LIST" 2>/dev/null

# gh pr create will fail if PR already exists, so try to edit instead
if [ $? -ne 0 ]; then
    echo "PR may already exist, attempting to update..."
    gh pr edit "$BRANCH_NAME" --title "$FINAL_PR_TITLE" --body "$PR_DESCRIPTION"

    if [ $? -eq 0 ]; then
        echo "✅ Pull request updated successfully"
        echo "   Reviewers: $REVIEWERS_LIST"
    else
        echo "⚠️  Could not create or update PR. It may already exist."
        echo "   Check: https://github.com/truenas/documentation/pulls"
    fi
else
    echo "✅ Pull request created successfully"
    echo "   Reviewers: $REVIEWERS_LIST"
fi

echo "========================================="
echo "PR creation complete!"
echo "========================================="
