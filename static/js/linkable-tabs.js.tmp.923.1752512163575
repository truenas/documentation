/**
 * Linkable Tab Box JavaScript - TrueNAS themed tabs with URL linking
 * Supports dark/light mode, matches TrueNAS styling, and processes Markdown
 */

/**
 * Process markdown lists with proper nesting support
 * @param {string} html - HTML string to process
 * @returns {string} HTML string with properly formatted lists
 */
function processLists(html) {
    const lines = html.split('\n');
    const result = [];
    let currentList = null;
    let listStack = [];
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const trimmedLine = line.trim();
        
        // Check for unordered list items (*, -, +)
        const unorderedMatch = line.match(/^(\s*)[\*\-\+]\s+(.+)$/);
        // Check for ordered list items (1., 2., etc.)
        const orderedMatch = line.match(/^(\s*)\d+\.\s+(.+)$/);
        
        if (unorderedMatch || orderedMatch) {
            const indent = (unorderedMatch || orderedMatch)[1].length;
            const content = (unorderedMatch || orderedMatch)[2];
            const listType = unorderedMatch ? 'ul' : 'ol';
            
            // Handle nesting
            if (currentList === null) {
                // Start new list
                result.push(`<${listType}>`);
                listStack = [{ type: listType, indent: indent }];
                currentList = listType;
            } else {
                const currentIndent = listStack[listStack.length - 1].indent;
                
                if (indent > currentIndent) {
                    // Nested list
                    result.push(`<${listType}>`);
                    listStack.push({ type: listType, indent: indent });
                } else if (indent < currentIndent) {
                    // Close nested lists
                    while (listStack.length > 0 && listStack[listStack.length - 1].indent > indent) {
                        const closingList = listStack.pop();
                        result.push(`</${closingList.type}>`);
                    }
                    
                    // Check if we need to start a new list type
                    if (listStack.length === 0 || listStack[listStack.length - 1].type !== listType) {
                        if (listStack.length > 0) {
                            const closingList = listStack.pop();
                            result.push(`</${closingList.type}>`);
                        }
                        result.push(`<${listType}>`);
                        listStack.push({ type: listType, indent: indent });
                    }
                } else if (currentList !== listType) {
                    // Different list type at same level
                    const closingList = listStack.pop();
                    result.push(`</${closingList.type}>`);
                    result.push(`<${listType}>`);
                    listStack.push({ type: listType, indent: indent });
                }
            }
            
            result.push(`<li>${content}</li>`);
            currentList = listType;
        } else {
            // Not a list item
            if (currentList !== null) {
                // Close all open lists
                while (listStack.length > 0) {
                    const closingList = listStack.pop();
                    result.push(`</${closingList.type}>`);
                }
                currentList = null;
            }
            result.push(line);
        }
    }
    
    // Close any remaining open lists
    while (listStack.length > 0) {
        const closingList = listStack.pop();
        result.push(`</${closingList.type}>`);
    }
    
    return result.join('\n');
}

/**
 * Generate a header ID from text (similar to Hugo's header anchor generation)
 * @param {string} text - Header text
 * @returns {string} URL-safe ID
 */
function generateHeaderId(text) {
    return text
        .toLowerCase()
        .replace(/[^a-z0-9\s-]/g, '') // Remove special characters
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/-+/g, '-') // Replace multiple hyphens with single
        .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens
}

/**
 * Simple markdown parser for basic markdown elements
 * @param {string} markdown - Markdown text to parse
 * @returns {string} HTML string
 */
function parseMarkdown(markdown) {
    if (!markdown) return '';
    
    let html = markdown;
    
    // First, protect existing code blocks by temporarily replacing them
    const codeBlocks = [];
    html = html.replace(/```([\s\S]*?)```/g, function(match, content) {
        const placeholder = `__CODE_BLOCK_${codeBlocks.length}__`;
        codeBlocks.push(`<pre><code>${content.trim()}</code></pre>`);
        return placeholder;
    });
    
    // Headers (must be processed first) - add anchor functionality
    html = html.replace(/^### (.*$)/gim, function(match, content) {
        const id = generateHeaderId(content);
        return `<h3 id="${id}">${content}<a href="#${id}" class="header-link" onclick="copyHeaderLink('${id}', event)" title="Copy link to this section">ðŸ”—</a></h3>`;
    });
    html = html.replace(/^## (.*$)/gim, function(match, content) {
        const id = generateHeaderId(content);
        return `<h2 id="${id}">${content}<a href="#${id}" class="header-link" onclick="copyHeaderLink('${id}', event)" title="Copy link to this section">ðŸ”—</a></h2>`;
    });
    html = html.replace(/^# (.*$)/gim, function(match, content) {
        const id = generateHeaderId(content);
        return `<h1 id="${id}">${content}<a href="#${id}" class="header-link" onclick="copyHeaderLink('${id}', event)" title="Copy link to this section">ðŸ”—</a></h1>`;
    });
    
    // Bold and italic
    html = html.replace(/\*\*\*(.*?)\*\*\*/g, '<strong><em>$1</em></strong>');
    html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
    
    // Inline code (avoiding conflicts with protected code blocks)
    html = html.replace(/`([^`]+)`/g, '<code>$1</code>');
    
    // Links
    html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>');
    
    // Process lists properly with nesting support
    html = processLists(html);
    
    // Blockquotes
    html = html.replace(/^> (.+$)/gim, '<blockquote>$1</blockquote>');
    
    // Horizontal rules
    html = html.replace(/^---$/gim, '<hr>');
    
    // Line breaks and paragraphs
    html = html.replace(/\n\n/g, '</p><p>');
    html = '<p>' + html + '</p>';
    
    // Clean up empty paragraphs
    html = html.replace(/<p><\/p>/g, '');
    html = html.replace(/<p>(<h[1-6]>)/g, '$1');
    html = html.replace(/(<\/h[1-6]>)<\/p>/g, '$1');
    html = html.replace(/<p>(<ul>|<ol>|<blockquote>|<pre>|<hr>)/g, '$1');
    html = html.replace(/(<\/ul>|<\/ol>|<\/blockquote>|<\/pre>|<hr>)<\/p>/g, '$1');
    
    // Restore code blocks
    codeBlocks.forEach((block, index) => {
        html = html.replace(`__CODE_BLOCK_${index}__`, block);
    });
    
    // Process existing HTML headers to add anchors
    html = html.replace(/<h([1-6])>([^<]+)<\/h[1-6]>/g, function(match, level, content) {
        const id = generateHeaderId(content);
        return `<h${level} id="${id}">${content}<a href="#${id}" class="header-link" onclick="copyHeaderLink('${id}', event)" title="Copy link to this section">ðŸ”—</a></h${level}>`;
    });
    
    return html;
}

/**
 * Creates a linkable tab box
 * @param {string} containerId - ID of the container element
 * @param {Array} tabs - Array of tab objects with {id, label, content, markdownFile}
 * @param {Object} options - Configuration options
 */
function createLinkableTabs(containerId, tabs, options = {}) {
    const config = {
        defaultTab: options.defaultTab || (tabs.length > 0 ? tabs[0].id : null),
        urlHashEnabled: options.urlHashEnabled !== false, // Default to true
        theme: options.theme || 'truenas', // 'truenas' or 'minimal'
        enableMarkdown: options.enableMarkdown !== false // Default to true
    };

    const container = document.getElementById(containerId);
    if (!container) {
        console.error('Container element not found:', containerId);
        return;
    }

    // Add CSS for the tabs
    if (!document.getElementById('linkable-tabs-styles')) {
        const styleSheet = document.createElement('style');
        styleSheet.id = 'linkable-tabs-styles';
        styleSheet.textContent = `
            .linkable-tabs-wrapper {
                --truenas-primary: #0095d5;
                --truenas-primary-hover: #0084c0;
                --truenas-secondary: #71bf44;
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                margin: 20px 0;
            }
            
            .linkable-tabs-nav {
                display: flex;
                border-bottom: 2px solid var(--accent-color, #dee2e6);
                background-color: var(--body-background, white);
                border-radius: 8px 8px 0 0;
                overflow: hidden;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
            
            .linkable-tab-button {
                background: var(--accent-color-lite, #f8f9fa);
                color: var(--body-font-color, #333);
                border: none;
                padding: 15px 25px;
                cursor: pointer;
                font-size: 14px;
                font-weight: 500;
                transition: all 0.3s ease;
                border-bottom: 3px solid transparent;
                position: relative;
                text-decoration: none;
                display: inline-block;
                border-right: 1px solid var(--accent-color, #dee2e6);
            }
            
            .linkable-tab-button:last-child {
                border-right: none;
            }
            
            .linkable-tab-button:hover {
                background: var(--accent-color, #e9ecef);
                color: var(--truenas-primary);
                transform: translateY(-1px);
            }
            
            .linkable-tab-button.active {
                background: var(--body-background, white);
                color: var(--truenas-primary);
                border-bottom-color: var(--truenas-primary);
                font-weight: 600;
                box-shadow: 0 -2px 4px rgba(0, 149, 213, 0.2);
            }
            
            .linkable-tab-content {
                background: var(--body-background, white);
                border: 1px solid var(--accent-color, #dee2e6);
                border-top: none;
                border-radius: 0 0 8px 8px;
                padding: 25px;
                min-height: 200px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
            
            .linkable-tab-pane {
                display: none;
                animation: fadeIn 0.3s ease;
            }
            
            .linkable-tab-pane.active {
                display: block;
            }
            
            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(10px); }
                to { opacity: 1; transform: translateY(0); }
            }
            
            /* Responsive design */
            @media (max-width: 768px) {
                .linkable-tabs-nav {
                    flex-direction: column;
                }
                
                .linkable-tab-button {
                    border-right: none;
                    border-bottom: 1px solid var(--accent-color, #dee2e6);
                    text-align: center;
                }
                
                .linkable-tab-button:last-child {
                    border-bottom: none;
                }
                
                .linkable-tab-content {
                    padding: 20px 15px;
                }
            }
            
            /* Link styling for tabs */
            .linkable-tab-link {
                color: inherit;
                text-decoration: none;
                display: block;
                width: 100%;
                height: 100%;
            }
            
            .linkable-tab-link:hover {
                color: inherit;
                text-decoration: none;
            }
            
            /* Copy link button */
            .tab-copy-link {
                position: absolute;
                top: 5px;
                right: 5px;
                background: var(--truenas-primary);
                color: white;
                border: none;
                border-radius: 3px;
                padding: 2px 6px;
                font-size: 10px;
                cursor: pointer;
                opacity: 0;
                transition: opacity 0.2s;
            }
            
            .linkable-tab-button:hover .tab-copy-link {
                opacity: 1;
            }
            
            .tab-copy-link:hover {
                background: var(--truenas-primary-hover);
            }
            
            /* List styling for markdown content */
            .linkable-tab-content ul,
            .linkable-tab-content ol {
                margin: 16px 0;
                padding-left: 24px;
            }
            
            .linkable-tab-content ul {
                list-style-type: disc;
            }
            
            .linkable-tab-content ol {
                list-style-type: decimal;
            }
            
            .linkable-tab-content li {
                margin: 8px 0;
                line-height: 1.5;
            }
            
            .linkable-tab-content ul ul,
            .linkable-tab-content ol ol,
            .linkable-tab-content ul ol,
            .linkable-tab-content ol ul {
                margin: 4px 0;
            }
            
            .linkable-tab-content ul ul {
                list-style-type: circle;
            }
            
            .linkable-tab-content ul ul ul {
                list-style-type: square;
            }
            
            /* Header link styling to match site theme */
            .linkable-tab-content .header-link {
                color: var(--truenas-primary, #0095d5);
                text-decoration: none;
                opacity: 0;
                transition: opacity 0.2s;
                margin-left: 8px;
                font-weight: normal;
                font-size: 0.8em;
                cursor: pointer;
            }
            
            .linkable-tab-content h1:hover .header-link,
            .linkable-tab-content h2:hover .header-link,
            .linkable-tab-content h3:hover .header-link,
            .linkable-tab-content h4:hover .header-link,
            .linkable-tab-content h5:hover .header-link,
            .linkable-tab-content h6:hover .header-link {
                opacity: 1;
            }
            
            .linkable-tab-content .header-link:hover {
                color: var(--truenas-primary-hover, #0084c0);
                transform: scale(1.1);
            }
        `;
        document.head.appendChild(styleSheet);
    }

    // Create tab structure
    const tabsHTML = `
        <div class="linkable-tabs-wrapper">
            <div class="linkable-tabs-nav" role="tablist">
                ${tabs.map(tab => `
                    <button class="linkable-tab-button" 
                            role="tab" 
                            id="tab-${tab.id}" 
                            data-tab="${tab.id}"
                            aria-controls="pane-${tab.id}">
                        ${tab.label}
                        <button class="tab-copy-link" 
                                onclick="copyTabLink('${tab.id}')" 
                                title="Copy link to this tab">
                            ðŸ”—
                        </button>
                    </button>
                `).join('')}
            </div>
            <div class="linkable-tab-content">
                ${tabs.map(tab => `
                    <div class="linkable-tab-pane" 
                         role="tabpanel" 
                         id="pane-${tab.id}" 
                         aria-labelledby="tab-${tab.id}">
${config.enableMarkdown && tab.content ? parseMarkdown(tab.content) : (tab.content || '<p style="color: #6c757d; font-style: italic;">Content for this tab will be added here.</p>')}
                    </div>
                `).join('')}
            </div>
        </div>
    `;

    container.innerHTML = tabsHTML;

    // Add event listeners to tab buttons
    tabs.forEach(tab => {
        const button = document.getElementById(`tab-${tab.id}`);
        button.addEventListener('click', (e) => {
            e.preventDefault();
            switchToTab(tab.id, config.urlHashEnabled);
        });
    });

    // Handle URL hash on page load
    if (config.urlHashEnabled) {
        const hash = window.location.hash.substring(1);
        const initialTab = hash && tabs.find(t => t.id === hash) ? hash : config.defaultTab;
        switchToTab(initialTab, false); // Don't update URL on initial load
        
        // Listen for hash changes
        window.addEventListener('hashchange', () => {
            const newHash = window.location.hash.substring(1);
            if (newHash && tabs.find(t => t.id === newHash)) {
                switchToTab(newHash, false);
            }
        });
    } else {
        // Just show default tab
        switchToTab(config.defaultTab, false);
    }

    /**
     * Switches to a specific tab
     * @param {string} tabId - ID of the tab to switch to
     * @param {boolean} updateUrl - Whether to update the URL hash
     */
    function switchToTab(tabId, updateUrl = true) {
        // Hide all tab panes
        tabs.forEach(tab => {
            document.getElementById(`pane-${tab.id}`).classList.remove('active');
            document.getElementById(`tab-${tab.id}`).classList.remove('active');
        });

        // Show selected tab
        const selectedPane = document.getElementById(`pane-${tabId}`);
        const selectedButton = document.getElementById(`tab-${tabId}`);
        
        if (selectedPane && selectedButton) {
            selectedPane.classList.add('active');
            selectedButton.classList.add('active');
            
            // Execute any scripts in the newly shown tab content
            executeTabScripts(selectedPane);
            
            // Update URL hash if enabled
            if (updateUrl && config.urlHashEnabled) {
                history.pushState(null, null, `#${tabId}`);
            }
        }
    }

    /**
     * Executes scripts found in tab content
     * @param {Element} tabPane - The tab pane element
     */
    function executeTabScripts(tabPane) {
        const scripts = tabPane.querySelectorAll('script');
        scripts.forEach(script => {
            if (script.src) {
                // External script - create new script element
                const newScript = document.createElement('script');
                newScript.src = script.src;
                document.head.appendChild(newScript);
            } else {
                // Inline script - execute the code
                try {
                    eval(script.textContent);
                } catch (error) {
                    console.warn('Error executing tab script:', error);
                }
            }
        });
    }

    // Store the switchToTab function globally for external access
    window[`switchToTab_${containerId}`] = switchToTab;
}

/**
 * Copies the link to a specific header to clipboard
 * @param {string} headerId - ID of the header
 * @param {Event} event - Click event
 */
function copyHeaderLink(headerId, event) {
    event.preventDefault();
    event.stopPropagation();
    
    const url = `${window.location.origin}${window.location.pathname}#${headerId}`;
    
    if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(url).then(() => {
            showCopyFeedback('Link copied!');
        });
    } else {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = url;
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        try {
            document.execCommand('copy');
            showCopyFeedback('Link copied!');
        } catch (err) {
            console.error('Failed to copy link');
        }
        document.body.removeChild(textArea);
    }
}

/**
 * Copies the link to a specific tab to clipboard
 * @param {string} tabId - ID of the tab
 */
function copyTabLink(tabId) {
    const url = `${window.location.origin}${window.location.pathname}#${tabId}`;
    
    if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(url).then(() => {
            showCopyFeedback();
        });
    } else {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = url;
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        try {
            document.execCommand('copy');
            showCopyFeedback();
        } catch (err) {
            console.error('Failed to copy link');
        }
        document.body.removeChild(textArea);
    }
}

/**
 * Shows visual feedback when link is copied
 */
function showCopyFeedback() {
    // Create temporary feedback element
    const feedback = document.createElement('div');
    feedback.textContent = 'Link copied!';
    feedback.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--truenas-secondary, #71bf44);
        color: white;
        padding: 8px 16px;
        border-radius: 4px;
        font-size: 14px;
        z-index: 1000;
        animation: slideIn 0.3s ease;
    `;
    
    document.body.appendChild(feedback);
    
    setTimeout(() => {
        feedback.remove();
    }, 2000);
}

// Add slide-in animation for feedback
if (!document.getElementById('copy-feedback-styles')) {
    const feedbackStyles = document.createElement('style');
    feedbackStyles.id = 'copy-feedback-styles';
    feedbackStyles.textContent = `
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `;
    document.head.appendChild(feedbackStyles);
}

// Global function for easy tab creation
window.createLinkableTabs = createLinkableTabs;