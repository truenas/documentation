name: Vale Linting

on:
  pull_request:
    paths:
      - '**/*.md'
      - '**/*.txt'
      - '.vale.ini'
      - 'Styles/**'

jobs:
  vale:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Vale
        run: |
          wget -qO- https://github.com/errata-ai/vale/releases/download/v3.12.0/vale_3.12.0_Linux_64-bit.tar.gz | tar -xzf - -C /usr/local/bin vale
          chmod +x /usr/local/bin/vale

      - name: Get changed markdown/text files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            **/*.md
            **/*.txt
          separator: " "

      - name: Run Vale
        continue-on-error: true
        run: |
          vale sync
          if [ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]; then
            echo "Running Vale on changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
            vale --output=JSON ${{ steps.changed-files.outputs.all_changed_files }} > vale-results.json || true
          else
            echo "No markdown or text files changed, skipping Vale check"
            echo '{}' > vale-results.json
          fi
          cat vale-results.json

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            try {
              const valeResults = JSON.parse(fs.readFileSync('vale-results.json', 'utf8'));
              const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.split(' ').filter(f => f.trim());
              
              let comment = '## Vale Style Guide Issues\n\n';
              
              // Filter results to only show changed files
              const filteredResults = {};
              for (const file of changedFiles) {
                if (valeResults[file]) {
                  // Read file content to identify header lines
                  let fileContent = [];
                  try {
                    const fs = require('fs');
                    fileContent = fs.readFileSync(file, 'utf8').split('\n');
                  } catch (error) {
                    console.log(`Could not read file ${file} for header detection`);
                    filteredResults[file] = valeResults[file];
                    continue;
                  }
                  
                  // Filter out acronym issues on header lines
                  const filteredIssues = valeResults[file].filter(issue => {
                    const lineIndex = issue.Line - 1; // Vale uses 1-based line numbers
                    const line = fileContent[lineIndex] || '';
                    
                    // Check if this line is a markdown header
                    const isHeader = line.trim().startsWith('#');
                    
                    // Check if this is an acronym-related rule
                    const isAcronymRule = issue.Check && (
                      issue.Check.includes('Acronym') || 
                      issue.Check.includes('.Acronym') ||
                      issue.Message.toLowerCase().includes('acronym') ||
                      issue.Message.includes('should be spelled out')
                    );
                    
                    // Filter out acronym issues on header lines, but keep everything else
                    if (isHeader && isAcronymRule) {
                      return false; // Skip this issue
                    }
                    return true; // Keep this issue
                  });
                  
                  filteredResults[file] = filteredIssues;
                }
              }
              
              // Count totals from filtered results only
              let totalIssues = 0;
              let errorCount = 0;
              let warningCount = 0;
              let suggestionCount = 0;
              
              for (const [file, issues] of Object.entries(filteredResults)) {
                totalIssues += issues.length;
                for (const issue of issues) {
                  if (issue.Severity === 'error') errorCount++;
                  else if (issue.Severity === 'warning') warningCount++;
                  else suggestionCount++;
                }
              }
              
              comment += `ðŸ“Š **Summary**: ${totalIssues} issues found in changed files - ${errorCount} errors, ${warningCount} warnings, ${suggestionCount} suggestions\n\n`;
              
              if (totalIssues === 0) {
                comment = '## Vale Style Guide Issues\n\nâœ… No style guide issues found in the changed files!';
              } else {
                comment += '**Changed files with issues:**\n\n';
                
                // Show only changed files with issues
                const sortedFiles = Object.entries(filteredResults)
                  .filter(([file, issues]) => issues.length > 0)
                  .sort(([,a], [,b]) => b.length - a.length);
                
                for (const [file, issues] of sortedFiles) {
                  comment += `### ${file} (${issues.length} issues)\n\n`;
                  
                  // Group issues by message to consolidate recurring issues
                  const issueGroups = {};
                  for (const issue of issues) {
                    const key = `${issue.Severity}:${issue.Message}`;
                    if (!issueGroups[key]) {
                      issueGroups[key] = {
                        severity: issue.Severity,
                        message: issue.Message,
                        lines: []
                      };
                    }
                    issueGroups[key].lines.push(issue.Line);
                  }
                  
                  // Display consolidated issues
                  for (const group of Object.values(issueGroups)) {
                    group.lines.sort((a, b) => a - b); // Sort line numbers
                    if (group.lines.length === 1) {
                      comment += `- **Line ${group.lines[0]}** - ${group.severity}: ${group.message}\n`;
                    } else {
                      const lineList = group.lines.join(', ');
                      comment += `- **Lines ${lineList}** - ${group.severity}: ${group.message}\n`;
                    }
                  }
                  comment += '\n';
                }
                
                comment += `ðŸ”§ **To fix**: Review the issues above and update your documentation accordingly.`;
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('No Vale results to process');
            }